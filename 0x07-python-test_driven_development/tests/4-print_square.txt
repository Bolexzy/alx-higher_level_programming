=============================
The ``4-print_square`` module
=============================

This module defines a square-printing function ``print_square(size)``.

Usage -> ints.
==============

``print_square(...)`` function prints a square using the character ``"#"``. The size parameter represents the dimensions(height and width) of the square.

::

    >>> print_square = __import__('4-print_square').print_square
    >>> print_square(1)
    #

::

    >>> print_square(3)
    ###
    ###
    ###

::

    >>> print_square(10)
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########
    ##########

if ``size`` is zero, the function prints nothing.

::

    >>> print_square(0)

Invalid sizes -> non int types.
===============================

The paramter ``size`` must be an integer. Otherwise, a TypeError is raised.

::

    >>> print_square('1')
    Traceback (most recent call last):
                ...
    TypeError: size must be an integer

::

    >>> print_square(2.5)
    Traceback (most recent call last):
                ...
    TypeError: size must be an integer

::

    >>> print_square(None)
    Traceback (most recent call last):
                ...
    TypeError: size must be an integer
   
If ``size`` is less than zero, a ValueError is raised.

::

    >>> print_square(-1)
    Traceback (most recent call last):
                ...
    ValueError: size must be >= 0

Note that type-checking occurs before value-checking.

::

    >>> print_square(-2.5)
    Traceback (most recent call last):
                ...
    TypeError: size must be an integer

At least one argument must be provided.

::

    >>> print_square()
    Traceback (most recent call last):
                ...
    TypeError: print_square() missing 1 required positional argument: 'size'
