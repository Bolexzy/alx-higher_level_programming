================================
``The  2-matrix_divided module``
================================

This module defines a matrix divison ``matrix_divided(matrix, div)``.

Usage -> Numbers
================

``matrix_divided(...)`` returns a new matrix list that is a copy of the parameter ``matrix`` with each element in it divided by ``div``.

::

    >>> matrix_divided = __import__('2-matrix_divided').matrix_divided
    >>> matrix = [
    ...     [2, 4, 6],
    ...     [8, 10, 12]
    ... ]
    >>> print(matrix_divided(matrix, 2))
    [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0]]

Note that the quotients are rounded to a maximum of two decimal places.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]

The original matrix is left unchanged.

::

    >>> print(matrix)
    [[1, 2, 3], [4, 5, 6]]

It can also handle division by floating-point numbers.

::

    >>> matrix = [
    ...     [0.5, -1.5, 2.5],
    ...     [-3.5, 4.5, 5.5]
    ... ]
    >>> print(matrix_divided(matrix, 2.0))
    [[0.25, -0.75, 1.25], [-1.75, 2.25, 2.75]]

Integers and floats can be combined.

::

    >>> matrix = [[1 , 1.3, 2.6, -3.9, 4], [5, 5.3, -6.9, 7.0, 9]]
    >>> print(matrix_divided(matrix, 3))
    [[0.33, 0.43, 0.87, -1.3, 1.33], [1.67, 1.77, -2.3, 2.33, 3.0]]
 
Non - integers / floats / lists
======================

The parameter ``matrix`` must be a list of lists consisting of either ints or
floats. If ``matrix`` is not a list, a TypeError is raised.

::

    >>> matrix = "im a string not a list"
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
     	       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

::

    >>> matrix = None
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
     	       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Note that an empty list will raise the TypeError.

::

    >>> matrix = []
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
     	       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

But an empty list of lists will succeed.

::

    >>> matrix = [[]]
    >>> print(matrix_divided(matrix, 3))
    [[]]

An identical TypeError is raised if ``matrix`` is not specifically a list of
lists.

::

    >>> matrix = [1, 2, 3]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
     	       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

If elements in ``matrix`` are neither int nor floats, same TypeError is raised again.

::

    >>> matrix = [
    ...     ['1', 2, 3],
    ...     [4, "not a number", 6]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
     	       ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Passing a tuple as an argument raises an identical TypeError:

::

    >>> matrix_divided((3, 6, 9), 3)
    Traceback (most recent call last):
    	      ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Also, all the rows in ``matrix`` must be the same size. If any rows are
of different sizes, a new TypeError is raised.

::

    >>> matrix = [
    ...     [1, 2, 3, 4],
    ...     [5, 6, 7]
    ... ]
    >>> print(matrix_divided(matrix, 3))
    Traceback (most recent call last):
    	      ...
    TypeError: Each row of the matrix must have the same size

Invalid Divisors
================

The parameter ``div`` must be either an int or float. Otherwise, a TypeError
is raised.

::

    >>> matrix = [
    ...     [1, 2, 3],
    ...     [4, 5, 6]
    ... ]
    >>> print(matrix_divided(matrix, "1"))
    Traceback (most recent call last):
    	      ...
    TypeError: div must be a number

::

    >>> print(matrix_divided(matrix, None))
    Traceback (most recent call last):
    	      ...
    TypeError: div must be a number

``div`` must also be non-zero. Otherwise, a ZeroDivisionError is raised.

::

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    	      ...
    ZeroDivisionError: division by zero
