=====================================
The ``101-lazy_matrix_mul.py`` Module
=====================================


This module defines a matrix multiplication function ``lazy_matrix_mul(m_a, m_b)``.

Usage
=====


::

    >>> lazy_matrix_mul = __import__('101-lazy_matrix_mul').lazy_matrix_mul
    >>> m_a = [
    ... [1, 2],
    ... [3, 4],
    ... ]
    >>> m_b = m_a
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[ 7 10]
     [15 22]]

::

    >>> m_a = [[1, 2]]
    >>> m_b = [
    ... [3, 4],
    ... [5, 6]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    [[13 16]]

::
    >>> A = [[1, 2, 3]]
    >>> B = [[4], [5], [6]]
    >>> print(lazy_matrix_mul(A, B))
    [[32]]

::

The function also works with floating point numbers.

::

    >>> A = [[1.5, 2.5], [3.5, 4.5]]
    >>> B = [[5.5, 6.5], [7.5, 8.5]]
    >>> print(lazy_matrix_mul(A, B))
    [[27. 31.]
     [53. 61.]]
    
A minimum of two arguments must be provided. Otherwise, a TyperError is raised.

::

    >>> print(lazy_matrix_mul(m_a))
    Traceback (most recent call last):
                ...
    TypeError: lazy_matrix_mul() missing 1 required positional argument: 'm_b'

::

    >>> print(lazy_matrix_mul()) # doctest: +NORMALIZE_WHITESPACE
    Traceback (most recent call last):
                ...
    TypeError: lazy_matrix_mul() missing 2 required positional arguments:
    'm_a' and 'm_b'


Invalid Usage(ValueError)
=============

If two matrices cannot be multiplied (ie. the row count of ``m_a`` is not
equal to the column count in ``m_b``), a ValueError is raised.

::

    >>> m_a = [[1, 2, 3], [4, 5, 6]]
    >>> m_b = [[7, 8], [9, 10]]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
                ...
    ValueError: shapes (2,3) and (2,2) not aligned: 3 (dim 1) != 2 (dim 0)

The parameters ``m_a`` and ``m_b`` cannot be empty. Otherwise, a ValueError
is raised.

::

    >>> print(lazy_matrix_mul([], [[1, 2], [3, 4]]))
    Traceback (most recent call last):
                ...
    ValueError: shapes (0,) and (2,2) not aligned: 0 (dim 0) != 2 (dim 0)

::

    >>> print(lazy_matrix_mul([[1, 2, 3], [4, 5, 6]], []))
    Traceback (most recent call last):
                ...
    ValueError: shapes (2,3) and (0,) not aligned: 3 (dim 1) != 0 (dim 0)

::

    >>> print(lazy_matrix_mul([[]], []))
    [0.]

Invalid Matrices(TypeError)
================

The parameters ``m_a`` and ``m_b`` must be lists. If either parameter is
not a list, a TypeError is raised.

::

    >>> print(lazy_matrix_mul("not a list", [[1, 2]]))
    Traceback (most recent call last):
                ...
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> print(lazy_matrix_mul([[1, 2]], "also not a list"))
    Traceback (most recent call last):
                ...
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> print(lazy_matrix_mul("not a list", "also not a list"))
    Traceback (most recent call last):
                ...
    ValueError: Scalar operands are not allowed, use '*' instead

::

    >>> print(lazy_matrix_mul(None, None))
    Traceback (most recent call last):
                ...
    TypeError: Object arrays are not currently supported

And not just any list - they *must* be lists of lists! Otherwise, behavior is
undefined.

::

    >>> print(lazy_matrix_mul([1, 2], [[3, 4]]))
    Traceback (most recent call last):
                ...
    ValueError: shapes (2,) and (1,2) not aligned: 2 (dim 0) != 1 (dim 0)

::

    >>> print(lazy_matrix_mul([[1, 2]], [3, 4]))
    [11]

::

    >>> print(lazy_matrix_mul([1, 2], [3, 4]))
    11

Also not just any list of lists - they *must* be lists of lists containing
integers or floats!

::

    >>> print(lazy_matrix_mul([[1, "non-number"]], [[3, 4]]))
    Traceback (most recent call last):
                ...
    ValueError: shapes (1,2) and (1,2) not aligned: 2 (dim 1) != 1 (dim 0)

::

    >>> print(lazy_matrix_mul([[1, 2]], [[{"a": 1}, 8.8]]))
    Traceback (most recent call last):
                ...
    TypeError: Object arrays are not currently supported

::

    >>> print(lazy_matrix_mul([[5, 6], [7, 8]], [[5, "6"], [7, 8]]))
    Traceback (most recent call last):
    TypeError: invalid data type for einsum

Finally, the length of all rows in matrices ``m_a`` and ``m_b`` should be
equivalent. Otherwise, ValueError is raised.

::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
                ...
    ValueError: setting an array element with a sequence.


::

    >>> m_a = [
    ... [1, 2],
    ... [3, 4]
    ... ]
    >>> m_b = [
    ... [1, 2],
    ... [3, 4, 5]
    ... ]
    >>> print(lazy_matrix_mul(m_a, m_b))
    Traceback (most recent call last):
                ...
    ValueError: setting an array element with a sequence.
